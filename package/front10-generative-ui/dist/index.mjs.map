{"version":3,"sources":["../src/provider.tsx","../src/registry.tsx","../src/renderer.tsx","../src/utils.ts"],"names":["GenerativeUIContext","createContext","useGenerativeUI","context","useContext","GenerativeUIProvider","children","setRegistry","useState","registryRef","useRef","registerComponent","component","newRegistry","renderComponent","props","toolId","state","input","output","error","toolCallId","React","key","createActionHandler","componentToolId","action","fullAction","value","useMemo","jsx","GenerativeUIRegistry","components","useEffect","useRegisterGenerativeComponent","GenerativeUIRenderer","Fragment","useRenderGenerativeUI","cn","inputs","clsx"],"mappings":"sJAkBA,IAAMA,CAAAA,CAAsBC,cAAsC,IAAI,CAAA,CAGzDC,CAAAA,CAAkB,IAAuB,CACpD,IAAMC,EAAUC,UAAAA,CAAWJ,CAAmB,EAC9C,GAAI,CAACG,EACH,MAAM,IAAI,KAAA,CACR,4DACF,CAAA,CAEF,OAAOA,CACT,CAAA,CAGaE,CAAAA,CAER,CAAC,CAAE,QAAA,CAAAC,CAAS,IAAM,CACrB,GAAM,EAAGC,CAAW,CAAA,CAAIC,SAAmC,EAAE,EACvDC,CAAAA,CAAcC,MAAAA,CAAiC,EAAE,CAAA,CAEjDC,CAAAA,CACJC,CAAAA,EACG,CAEH,IAAMC,EAAc,CAClB,GAAGJ,EAAY,OAAA,CACf,CAACG,EAAU,MAAM,EAAGA,CACtB,CAAA,CAEAH,CAAAA,CAAY,OAAA,CAAUI,EACtBN,CAAAA,CAAYM,CAAW,EACzB,CAAA,CAEMC,CAAAA,CACJC,GAC2B,CAC3B,GAAM,CAAE,MAAA,CAAAC,CAAAA,CAAQ,KAAA,CAAAC,EAAO,KAAA,CAAAC,CAAAA,CAAO,MAAA,CAAAC,CAAAA,CAAQ,KAAA,CAAAC,CAAAA,CAAO,WAAAC,CAAW,CAAA,CAAIN,CAAAA,CACtDH,CAAAA,CAAYH,CAAAA,CAAY,OAAA,CAAQO,CAAM,CAAA,CAE5C,GAAI,CAACJ,CAAAA,CAEH,OAAOU,EAAM,aAAA,CACX,KAAA,CACA,CACE,GAAA,CAAKD,CAAAA,CACL,SAAA,CAAW,kDACb,CAAA,CACA,CAAA,mCAAA,EAAsCL,CAAM,CAAA,CAC9C,CAAA,CAGF,IAAMO,CAAAA,CAAM,CAAA,EAAGF,CAAU,CAAA,CAAA,EAAIJ,CAAK,CAAA,CAAA,CAG5BO,EACHC,CAAAA,EAA6BC,CAAAA,EAAuC,CACnE,IAAMC,CAAAA,CAAa,CACjB,MAAA,CAAQF,CAAAA,CACR,GAAGC,CACL,CAAA,CAGAd,CAAAA,CAAU,eAAee,CAAU,EACrC,CAAA,CAEF,OAAQV,CAAAA,EACN,KAAK,iBAAA,CACL,KAAK,iBAAA,CACH,OAAIL,CAAAA,CAAU,gBAAA,CACLU,EAAM,aAAA,CAAcV,CAAAA,CAAU,iBAAkB,CACrD,GAAA,CAAAW,EACA,KAAA,CAAAL,CAAAA,CACA,QAAA,CAAUM,CAAAA,CAAoBR,CAAM,CACtC,CAAC,CAAA,CAEI,IAAA,CAET,KAAK,kBAAA,CAEH,OAAIG,CAAAA,EAAU,OAAOA,CAAAA,EAAW,QAAA,EAAY,OAAA,GAAWA,CAAAA,CACjDP,CAAAA,CAAU,cAAA,CACLU,EAAM,aAAA,CAAcV,CAAAA,CAAU,eAAgB,CACnD,GAAA,CAAAW,EACA,KAAA,CAAO,MAAA,CAAOJ,CAAAA,CAAO,KAAK,CAAA,CAC1B,KAAA,CAAAD,EACA,QAAA,CAAUM,CAAAA,CAAoBR,CAAM,CACtC,CAAC,CAAA,CAGIM,EAAM,aAAA,CACX,KAAA,CACA,CACE,GAAA,CAAAC,CAAAA,CACA,SAAA,CAAW,iCACb,CAAA,CACA,CAAA,OAAA,EAAU,OAAOJ,CAAAA,CAAO,KAAK,CAAC,CAAA,CAChC,CAAA,CAIKG,CAAAA,CAAM,aAAA,CAAcV,CAAAA,CAAU,gBAAA,CAAkB,CACrD,GAAA,CAAAW,CAAAA,CACA,OAAAJ,CAAAA,CACA,KAAA,CAAAD,EACA,QAAA,CAAUM,CAAAA,CAAoBR,CAAM,CACtC,CAAC,CAAA,CAEH,KAAK,cAAA,CACH,OAAIJ,EAAU,cAAA,CACLU,CAAAA,CAAM,cAAcV,CAAAA,CAAU,cAAA,CAAgB,CACnD,GAAA,CAAAW,CAAAA,CACA,KAAA,CAAOH,GAAS,wBAAA,CAChB,KAAA,CAAAF,CAAAA,CACA,QAAA,CAAUM,CAAAA,CAAoBR,CAAM,CACtC,CAAC,CAAA,CAGIM,CAAAA,CAAM,aAAA,CACX,KAAA,CACA,CACE,IAAAC,CAAAA,CACA,SAAA,CAAW,iCACb,CAAA,CACA,CAAA,OAAA,EAAUH,GAAS,wBAAwB,CAAA,CAC7C,CAAA,CAEF,QACE,OAAA,OAAA,CAAQ,IAAA,CAAK,kBAAkBH,CAAK,CAAA,WAAA,EAAcD,CAAM,CAAA,CAAE,CAAA,CACnD,IACX,CACF,CAAA,CAEMY,CAAAA,CAAQC,OAAAA,CACZ,KAAO,CACL,iBAAA,CAAAlB,EACA,eAAA,CAAAG,CACF,GACA,EACF,EAEA,OACEgB,GAAAA,CAAC9B,CAAAA,CAAoB,QAAA,CAApB,CAA6B,KAAA,CAAO4B,EAClC,QAAA,CAAAtB,CAAAA,CACH,CAEJ,EC5JO,IAAMyB,CAAAA,CAER,CAAC,CAAE,UAAA,CAAAC,CAAW,CAAA,GAAM,CACvB,GAAM,CAAE,iBAAA,CAAArB,CAAkB,CAAA,CAAIT,CAAAA,EAAgB,CAE9C,OAAA+B,SAAAA,CAAU,IAAM,CACdD,CAAAA,CAAW,OAAA,CAASpB,GAAc,CAChCD,CAAAA,CAAkBC,CAAS,EAC7B,CAAC,EACH,CAAA,CAAG,CAACoB,CAAAA,CAAYrB,CAAiB,CAAC,CAAA,CAE3B,IACT,CAAA,CAGauB,CAAAA,CACXtB,GACG,CACH,GAAM,CAAE,iBAAA,CAAAD,CAAkB,CAAA,CAAIT,GAAgB,CAE9C+B,SAAAA,CAAU,IAAM,CACdtB,CAAAA,CAAkBC,CAAS,EAC7B,CAAA,CAAG,CAACA,CAAAA,CAAWD,CAAiB,CAAC,EACnC,MCxBawB,CAAAA,CACXpB,CAAAA,EACG,CACH,GAAM,CAAE,eAAA,CAAAD,CAAgB,CAAA,CAAIZ,CAAAA,EAAgB,CAE5C,OAAO4B,GAAAA,CAAAM,QAAAA,CAAA,CAAG,QAAA,CAAAtB,CAAAA,CAAgBC,CAAK,CAAA,CAAE,CACnC,CAAA,CAGasB,EAAwB,IAAM,CACzC,GAAM,CAAE,eAAA,CAAAvB,CAAgB,CAAA,CAAIZ,CAAAA,EAAgB,CAE5C,OAAOY,CACT,ECjBO,SAASwB,CAAAA,CAAAA,GAAMC,CAAAA,CAAsB,CAC1C,OAAOC,IAAAA,CAAK,GAAGD,CAAM,CACvB","file":"index.mjs","sourcesContent":["'use client';\n\nimport React, {\n  createContext,\n  useContext,\n  useMemo,\n  useState,\n  useRef,\n} from 'react';\nimport type {\n  GenerativeUIComponent,\n  GenerativeUIRegistryType,\n  GenerativeUIRendererProps,\n  UseGenerativeUI,\n  UserAction,\n} from './types';\n\n// Contexto para el registro de componentes generativos\nconst GenerativeUIContext = createContext<UseGenerativeUI | null>(null);\n\n// Hook para usar el contexto de Generative UI\nexport const useGenerativeUI = (): UseGenerativeUI => {\n  const context = useContext(GenerativeUIContext);\n  if (!context) {\n    throw new Error(\n      'useGenerativeUI must be used within a GenerativeUIProvider',\n    );\n  }\n  return context;\n};\n\n// Provider principal\nexport const GenerativeUIProvider: React.FC<{\n  children: React.ReactNode;\n}> = ({ children }) => {\n  const [, setRegistry] = useState<GenerativeUIRegistryType>({});\n  const registryRef = useRef<GenerativeUIRegistryType>({});\n\n  const registerComponent = <TInput = any, TOutput = any>(\n    component: GenerativeUIComponent<TInput, TOutput>,\n  ) => {\n    // Actualizar tanto el estado como la ref\n    const newRegistry = {\n      ...registryRef.current,\n      [component.toolId]: component,\n    };\n\n    registryRef.current = newRegistry;\n    setRegistry(newRegistry);\n  };\n\n  const renderComponent = (\n    props: GenerativeUIRendererProps,\n  ): React.ReactNode | null => {\n    const { toolId, state, input, output, error, toolCallId } = props;\n    const component = registryRef.current[toolId];\n\n    if (!component) {\n      // En lugar de mostrar un error, mostrar un componente de fallback\n      return React.createElement(\n        'div',\n        {\n          key: toolCallId,\n          className: 'p-4 border border-gray-200 rounded-lg bg-gray-50',\n        },\n        `Component not registered for tool: ${toolId}`,\n      );\n    }\n\n    const key = `${toolCallId}-${state}`;\n\n    // Función helper para pasar onAction a los componentes\n    const createActionHandler =\n      (componentToolId: string) => (action: Omit<UserAction, 'toolId'>) => {\n        const fullAction = {\n          toolId: componentToolId,\n          ...action,\n        };\n\n        // Usar el onUserAction del componente registrado si existe\n        component.onUserAction?.(fullAction);\n      };\n\n    switch (state) {\n      case 'input-streaming':\n      case 'input-available':\n        if (component.LoadingComponent) {\n          return React.createElement(component.LoadingComponent, {\n            key,\n            input,\n            onAction: createActionHandler(toolId),\n          });\n        }\n        return null;\n\n      case 'output-available':\n        // Verificar si hay error en el output\n        if (output && typeof output === 'object' && 'error' in output) {\n          if (component.ErrorComponent) {\n            return React.createElement(component.ErrorComponent, {\n              key,\n              error: String(output.error),\n              input,\n              onAction: createActionHandler(toolId),\n            });\n          }\n          // Fallback si no hay ErrorComponent\n          return React.createElement(\n            'div',\n            {\n              key,\n              className: 'text-red-500 p-2 border rounded',\n            },\n            `Error: ${String(output.error)}`,\n          );\n        }\n\n        // Éxito - renderizar componente de éxito\n        return React.createElement(component.SuccessComponent, {\n          key,\n          output,\n          input,\n          onAction: createActionHandler(toolId),\n        });\n\n      case 'output-error':\n        if (component.ErrorComponent) {\n          return React.createElement(component.ErrorComponent, {\n            key,\n            error: error || 'Unknown error occurred',\n            input,\n            onAction: createActionHandler(toolId),\n          });\n        }\n        // Fallback si no hay ErrorComponent\n        return React.createElement(\n          'div',\n          {\n            key,\n            className: 'text-red-500 p-2 border rounded',\n          },\n          `Error: ${error || 'Unknown error occurred'}`,\n        );\n\n      default:\n        console.warn(`Unknown state: ${state} for tool: ${toolId}`);\n        return null;\n    }\n  };\n\n  const value = useMemo<UseGenerativeUI>(\n    () => ({\n      registerComponent,\n      renderComponent,\n    }),\n    [],\n  );\n\n  return (\n    <GenerativeUIContext.Provider value={value}>\n      {children}\n    </GenerativeUIContext.Provider>\n  );\n};\n","'use client';\n\nimport { useEffect } from 'react';\nimport { useGenerativeUI } from './provider';\nimport type { GenerativeUIComponent } from './types';\n\n// Componente para registrar componentes generativos automáticamente\nexport const GenerativeUIRegistry: React.FC<{\n  components: GenerativeUIComponent[];\n}> = ({ components }) => {\n  const { registerComponent } = useGenerativeUI();\n\n  useEffect(() => {\n    components.forEach((component) => {\n      registerComponent(component);\n    });\n  }, [components, registerComponent]);\n\n  return null;\n};\n\n// Hook helper para registrar un componente\nexport const useRegisterGenerativeComponent = <TInput = any, TOutput = any>(\n  component: GenerativeUIComponent<TInput, TOutput>,\n) => {\n  const { registerComponent } = useGenerativeUI();\n\n  useEffect(() => {\n    registerComponent(component);\n  }, [component, registerComponent]);\n};\n","'use client';\n\nimport { useGenerativeUI } from './provider';\nimport type { GenerativeUIRendererProps } from './types';\n\n// Componente renderizador que se integra con el sistema de mensajes\nexport const GenerativeUIRenderer: React.FC<GenerativeUIRendererProps> = (\n  props,\n) => {\n  const { renderComponent } = useGenerativeUI();\n\n  return <>{renderComponent(props)}</>;\n};\n\n// Hook helper para renderizar componentes generativos desde el sistema de mensajes\nexport const useRenderGenerativeUI = () => {\n  const { renderComponent } = useGenerativeUI();\n\n  return renderComponent;\n};\n","import { clsx, type ClassValue } from 'clsx';\n\nexport function cn(...inputs: ClassValue[]) {\n  return clsx(...inputs);\n}\n"]}
