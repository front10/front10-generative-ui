{"version":3,"sources":["../src/provider.tsx","../src/registry.tsx","../src/renderer.tsx","../src/utils.ts"],"names":["GenerativeUIContext","createContext","useGenerativeUI","context","useContext","GenerativeUIProvider","children","setRegistry","useState","registryRef","useRef","registerComponent","component","newRegistry","renderComponent","props","toolId","state","input","output","error","toolCallId","React","key","value","useMemo","jsx","GenerativeUIRegistry","components","useEffect","useRegisterGenerativeComponent","GenerativeUIRenderer","Fragment","useRenderGenerativeUI","cn","inputs","clsx"],"mappings":"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","file":"index.mjs","sourcesContent":["'use client';\n\nimport React, {\n  createContext,\n  useContext,\n  useMemo,\n  useState,\n  useRef,\n} from 'react';\nimport type {\n  GenerativeUIComponent,\n  GenerativeUIRegistryType,\n  GenerativeUIRendererProps,\n  UseGenerativeUI,\n} from './types';\n\n// Contexto para el registro de componentes generativos\nconst GenerativeUIContext = createContext<UseGenerativeUI | null>(null);\n\n// Hook para usar el contexto de Generative UI\nexport const useGenerativeUI = (): UseGenerativeUI => {\n  const context = useContext(GenerativeUIContext);\n  if (!context) {\n    throw new Error(\n      'useGenerativeUI must be used within a GenerativeUIProvider',\n    );\n  }\n  return context;\n};\n\n// Provider principal\nexport const GenerativeUIProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [, setRegistry] = useState<GenerativeUIRegistryType>({});\n  const registryRef = useRef<GenerativeUIRegistryType>({});\n\n  const registerComponent = <TInput = any, TOutput = any>(\n    component: GenerativeUIComponent<TInput, TOutput>,\n  ) => {\n    // Actualizar tanto el estado como la ref\n    const newRegistry = {\n      ...registryRef.current,\n      [component.toolId]: component,\n    };\n\n    registryRef.current = newRegistry;\n    setRegistry(newRegistry);\n  };\n\n  const renderComponent = (\n    props: GenerativeUIRendererProps,\n  ): React.ReactNode | null => {\n    const { toolId, state, input, output, error, toolCallId } = props;\n    const component = registryRef.current[toolId];\n\n    if (!component) {\n      // En lugar de mostrar un error, mostrar un componente de fallback\n      return React.createElement(\n        'div',\n        {\n          key: toolCallId,\n          className: 'p-4 border border-gray-200 rounded-lg bg-gray-50',\n        },\n        `Component not registered for tool: ${toolId}`,\n      );\n    }\n\n    const key = `${toolCallId}-${state}`;\n\n    switch (state) {\n      case 'input-streaming':\n      case 'input-available':\n        if (component.LoadingComponent) {\n          return React.createElement(component.LoadingComponent, {\n            key,\n            input,\n          });\n        }\n        return null;\n\n      case 'output-available':\n        // Verificar si hay error en el output\n        if (output && typeof output === 'object' && 'error' in output) {\n          if (component.ErrorComponent) {\n            return React.createElement(component.ErrorComponent, {\n              key,\n              error: String(output.error),\n              input,\n            });\n          }\n          // Fallback si no hay ErrorComponent\n          return React.createElement(\n            'div',\n            {\n              key,\n              className: 'text-red-500 p-2 border rounded',\n            },\n            `Error: ${String(output.error)}`,\n          );\n        }\n\n        // Éxito - renderizar componente de éxito\n        return React.createElement(component.SuccessComponent, {\n          key,\n          output,\n          input,\n        });\n\n      case 'output-error':\n        if (component.ErrorComponent) {\n          return React.createElement(component.ErrorComponent, {\n            key,\n            error: error || 'Unknown error occurred',\n            input,\n          });\n        }\n        // Fallback si no hay ErrorComponent\n        return React.createElement(\n          'div',\n          {\n            key,\n            className: 'text-red-500 p-2 border rounded',\n          },\n          `Error: ${error || 'Unknown error occurred'}`,\n        );\n\n      default:\n        console.warn(`Unknown state: ${state} for tool: ${toolId}`);\n        return null;\n    }\n  };\n\n  const value = useMemo<UseGenerativeUI>(\n    () => ({\n      registerComponent,\n      renderComponent,\n    }),\n    [],\n  );\n\n  return (\n    <GenerativeUIContext.Provider value={value}>\n      {children}\n    </GenerativeUIContext.Provider>\n  );\n};\n","'use client';\n\nimport { useEffect } from 'react';\nimport { useGenerativeUI } from './provider';\nimport type { GenerativeUIComponent } from './types';\n\n// Componente para registrar componentes generativos automáticamente\nexport const GenerativeUIRegistry: React.FC<{\n  components: GenerativeUIComponent[];\n}> = ({ components }) => {\n  const { registerComponent } = useGenerativeUI();\n\n  useEffect(() => {\n    components.forEach((component) => {\n      registerComponent(component);\n    });\n  }, [components, registerComponent]);\n\n  return null;\n};\n\n// Hook helper para registrar un componente\nexport const useRegisterGenerativeComponent = <TInput = any, TOutput = any>(\n  component: GenerativeUIComponent<TInput, TOutput>,\n) => {\n  const { registerComponent } = useGenerativeUI();\n\n  useEffect(() => {\n    registerComponent(component);\n  }, [component, registerComponent]);\n};\n","'use client';\n\nimport { useGenerativeUI } from './provider';\nimport type { GenerativeUIRendererProps } from './types';\n\n// Componente renderizador que se integra con el sistema de mensajes\nexport const GenerativeUIRenderer: React.FC<GenerativeUIRendererProps> = (\n  props,\n) => {\n  const { renderComponent } = useGenerativeUI();\n\n  return <>{renderComponent(props)}</>;\n};\n\n// Hook helper para renderizar componentes generativos desde el sistema de mensajes\nexport const useRenderGenerativeUI = () => {\n  const { renderComponent } = useGenerativeUI();\n\n  return renderComponent;\n};\n","import { clsx, type ClassValue } from 'clsx';\n\nexport function cn(...inputs: ClassValue[]) {\n  return clsx(...inputs);\n}\n"]}